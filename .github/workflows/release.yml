name: Release

on:
  push:
    tags:
      - 'v*' # Run workflow on version tags, e.g. v1.0.0.

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }} # Requires a Grafana API key from Grafana.com.
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build and test frontend
        run: yarn build

      - name: Check for backend
        id: check-for-backend
        run: |
          if [ -f "Magefile.go" ]
          then
            echo "has-backend=true" >> $GITHUB_OUTPUT
          fi

      - name: Test backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@6f50bbb8ea47d56e62dee92392788acbc8192d0b
        with:
          version: latest
          args: coverage

      - name: Build backend
        if: steps.check-for-backend.outputs.has-backend == 'true'
        uses: magefile/mage-action@6f50bbb8ea47d56e62dee92392788acbc8192d0b
        with:
          version: latest
          args: buildAll

      - name: Warn missing Grafana API key
        run: |
          echo Please generate a Grafana API key: https://grafana.com/docs/grafana/latest/developers/plugins/sign-a-plugin/#generate-an-api-key
          echo Once done please follow the instructions found here: https://github.com/${{github.repository}}/blob/main/README.md#using-github-actions-release-workflow
        if: ${{ env.GRAFANA_API_KEY == '' }}

      - name: Sign plugin
        run: yarn sign
        if: ${{ env.GRAFANA_API_KEY != '' }}

      - name: Get plugin metadata
        id: metadata
        run: |
          sudo apt-get install jq

          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_TYPE=$(cat dist/plugin.json | jq -r .type)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip
          export GRAFANA_PLUGIN_ARTIFACT_CHECKSUM=${GRAFANA_PLUGIN_ARTIFACT}.md5

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "plugin-type=${GRAFANA_PLUGIN_TYPE}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT
          echo "archive-checksum=${GRAFANA_PLUGIN_ARTIFACT_CHECKSUM}" >> $GITHUB_OUTPUT

          echo "github-tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Read changelog
        id: changelog
        run: |
          awk '/^## / {s++} s == 1 {print}' CHANGELOG.md > release_notes.md
          echo "path=release_notes.md" >> $GITHUB_OUTPUT

      - name: Check package version
        env:
          PLUGIN_VERSION: ${{ steps.metadata.outputs.plugin-version }}
          GH_TAG: ${{ steps.metadata.outputs.github-tag }}
        run: if [ "v${PLUGIN_VERSION}" != "${GH_TAG}" ]; then printf "\033[0;31mPlugin version doesn't match tag name\033[0m\n"; exit 1; fi

      - name: Package plugin
        id: package-plugin
        env:
          PLUGIN_ID: ${{ steps.metadata.outputs.plugin-id }}
          ARCHIVE: ${{ steps.metadata.outputs.archive }}
          ARCHIVE_CHECKSUM: ${{ steps.metadata.outputs.archive-checksum }}
        run: |
          mv dist ${PLUGIN_ID}
          zip ${ARCHIVE} ${PLUGIN_ID} -r
          md5sum ${ARCHIVE} > ${ARCHIVE_CHECKSUM}
          echo "::set-output name=checksum::$(cat ./${ARCHIVE_CHECKSUM} | cut -d' ' -f1)"
      - name: Validate plugin
        env:
          ARCHIVE: ${{ steps.metadata.outputs.archive }}
        run: |
          git clone https://github.com/grafana/plugin-validator
          pushd ./plugin-validator/pkg/cmd/plugincheck2
          go install
          popd
          plugincheck2 -config ./plugin-validator/config/default.yaml ${ARCHIVE}

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: ${{ steps.changelog.outputs.path }}
          draft: true

      - name: Add plugin to release
        id: upload-plugin-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.metadata.outputs.archive }}
          asset_name: ${{ steps.metadata.outputs.archive }}
          asset_content_type: application/zip

      - name: Add checksum to release
        id: upload-checksum-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.metadata.outputs.archive-checksum }}
          asset_name: ${{ steps.metadata.outputs.archive-checksum }}
          asset_content_type: text/plain
